name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.0.0)"
        required: true
        type: string
      release_type:
        description: "Type of release"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: "Dry run (no actual release)"
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: "22"
  NPM_REGISTRY: "https://npm.pkg.github.com"

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.version.outputs.new-version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install conventional-changelog-cli
        run: npm install -g conventional-changelog-cli

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            echo "new-version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # Auto-increment based on release type
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
            
            if [ "$RELEASE_TYPE" = "major" ]; then
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1+1".0.0"}')
            elif [ "$RELEASE_TYPE" = "minor" ]; then
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2+1".0"}')
            else
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."$3+1}')
            fi
            
            echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Update package.json version
        run: npm version ${{ steps.version.outputs.new-version }} --no-git-tag-version

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from conventional commits
          conventional-changelog -p angular -i CHANGELOG.md -s -r 0 > temp_changelog.md

          # Extract the new version section
          NEW_VERSION="${{ steps.version.outputs.new-version }}"
          TODAY=$(date +%Y-%m-%d)

          # Create new changelog entry
          echo "# Changelog" > new_changelog.md
          echo "" >> new_changelog.md
          echo "## [$NEW_VERSION] - $TODAY" >> new_changelog.md
          echo "" >> new_changelog.md

          # Get commits since last tag
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            LAST_TAG=$(git describe --tags --abbrev=0)
            echo "### Changes since $LAST_TAG" >> new_changelog.md
            echo "" >> new_changelog.md
            
            # Get conventional commits
            git log --pretty=format:"%s" $LAST_TAG..HEAD | grep -E "^(feat|fix|docs|style|refactor|perf|test|chore)(\(.+\))?:" | head -20 >> new_changelog.md
          else
            echo "### Initial Release" >> new_changelog.md
            echo "" >> new_changelog.md
          fi

          echo "" >> new_changelog.md
          cat CHANGELOG.md >> new_changelog.md
          mv new_changelog.md CHANGELOG.md

          # Output changelog for next job
          echo "changelog=$(cat CHANGELOG.md)" >> $GITHUB_OUTPUT

      - name: Build package
        run: npm run build

      - name: Test package
        run: npm test

      - name: Show release info
        run: |
          echo "üöÄ Release Information:"
          echo "Version: ${{ steps.version.outputs.new-version }}"
          echo "Type: ${{ github.event.inputs.release_type }}"
          echo "Dry Run: ${{ github.event.inputs.dry_run }}"
          echo ""
          echo "üìù Changelog Preview:"
          echo "${{ steps.changelog.outputs.changelog }}"

      - name: Commit changes
        if: ${{ !github.event.inputs.dry_run }}
        run: |
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore(release): ${{ steps.version.outputs.new-version }}"
          git tag -a "v${{ steps.version.outputs.new-version }}" -m "Release ${{ steps.version.outputs.new-version }}"

      - name: Push changes
        if: ${{ !github.event.inputs.dry_run }}
        run: |
          git push origin main
          git push origin "v${{ steps.version.outputs.new-version }}"

  publish-package:
    needs: prepare-release
    if: ${{ !github.event.inputs.dry_run }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.NPM_REGISTRY }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    needs: [prepare-release, publish-package]
    if: ${{ !github.event.inputs.dry_run }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        run: |
          gh release create "v${{ needs.prepare-release.outputs.new-version }}" \
            --title "Release ${{ needs.prepare-release.outputs.new-version }}" \
            --notes "${{ needs.prepare-release.outputs.changelog }}" \
            --target main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
